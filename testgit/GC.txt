1.通常，GC采用有向图的方式记录和管理堆（heap）中的所有对象.
2.增量式GC
  GC在JVM中通常是由一个或一组进程来实现的，它本身也和用户程序一样占用heap空间，运行时也占用CPU.当GC进程运行时，应用程序停止运行。
  另外一方面，如果GC运行时间太短，则可能对象回收率太低，这意味着还有很多应该回收的对象没有被回收，仍然占用大量内存。
因此，在设计GC的时候，就必须在停顿时间和回收率之间进行权衡。
  增量式GC就是通过一定的回收算法，把一个长时间的中断，划分为很多个小的中断，通过这种方式减少GC对用户程序的影响。
虽然，增量式GC在整体性能上可能不如普通GC的效率高，但是它能够减少程序的最长停顿时间。HotSpot JVM增量式GC的实现是采用Train GC算法。
它的基本想法就是，将堆中的所有对象按照创建和使用情况进行分组，将使用频繁和具有相关性的对象放在一队中，随着程序的运行，不断对组进行调整。
当GC运行时，它总是先回收最老的对象，如果整组都为可回收对象，GC将整组回收。这样，每次GC运行只回收一定比例的不可达对象，保证程序的顺畅运行。 

 
