目录结构：
.git 版本库
index 缓存区
HEAD 指针


安装：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

新建仓库：
git init
git add "File" 把文件修改添加到暂存区
git commit -m "说明" 把暂存区的所有内容提交到当前分支

查看：
git status
git diff "File"
git log （--pretty=oneline）

回退：
$ git reset --hard HEAD^（HEAD~100）
$ git reset --hard 版本号
git reflog查看命令历史，以便确定要回到未来的哪个版本

撤销：
git checkout --File 让这个文件回到最近一次git commit或git add时的状态
git reset HEAD 文件名 可以把暂存区的修改撤销掉

删除：
$ git rm 文件名
$ git commit -m "说明"

链接远程库：
$ git remote add origin git@github.com:zeng15126227/learngit.git
git push origin 分支名

克隆远程库：
$ git clone git@github.com:zeng15126227/gitskills.git

分支：
$ git checkout -b dev 创建并转换
$ git branch dev 创建
$ git checkout dev 转换
git merge 分支名 命令用于合并指定分支到当前分支
$ git merge --no-ff -m "说明" 分支名 （会提交新版本）
$ git log --graph --pretty=oneline --abbrev-commit 查看分支信息
git stash 存储工作状态
git stash list 查看工作状态列表
git stash pop
   git stash apply
   git stash pop
git branch -D <name> 强行删除分支

多人协作：
git remote （-v） 查看远程库
$ git checkout -b dev origin/dev 在本地建立远程origin库dev分支
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

标签：
git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
git tag可以查看所有标签。














